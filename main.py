import logging
import os
from datetime import datetime
import gspread
from google.oauth2.service_account import Credentials
import telebot
from telebot import types
from telebot.types import ReplyKeyboardRemove

from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
SCOPES = ['https://www.googleapis.com/auth/spreadsheets',
          'https://www.googleapis.com/auth/drive']
CREDS = Credentials.from_service_account_file(
    'credentials.json', scopes=SCOPES)
CLIENT = gspread.authorize(CREDS)
SPREADSHEET_ID = os.getenv('SPREADSHEET_ID')
SHEET_NAME = os.getenv('SHEET_NAME')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
secret_token = os.getenv('TOKEN')
bot = telebot.TeleBot(token=secret_token)
print(secret_token)

# –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
WELCOME_TEXT = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–æ–¥–æ–ª–∂–∞—è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å
–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ —Å [–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://example.com/privacy)."""

MAIN_MENU_TEXT = """üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
–ú—ã —Ä–∞–¥—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –æ—Å—Ç–µ–∫–ª–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"""

CONTACTS_TEXT = """üìç –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:
—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, –¥. 10
üì± +7 (900) 000-00-00
‚úâÔ∏è info@okna.ru
üì≤ WhatsApp: https://wa.me/79000000000
üì≤ Telegram: https://t.me/okna_manager"""

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_data = {}


def save_to_google_sheet(data: dict):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É
    '''
    try:
        sheet = CLIENT.open_by_key(SPREADSHEET_ID).worksheet(SHEET_NAME)
        row = [
            data.get('name', ''),
            data.get('phone', ''),
            data.get('city', ''),
            data.get('answers', ''),
            data.get('branch', ''),
            datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        ]
        sheet.append_row(row)
        logger.info("Data successfully saved to Google Sheet")
        return True
    except gspread.exceptions.APIError as e:
        logger.error(
            f"Google API Error: {e.response.status_code} - {e.response.text}")
    except gspread.exceptions.SpreadsheetNotFound:
        logger.error("Spreadsheet not found. Check SPREADSHEET_ID")
    except gspread.exceptions.WorksheetNotFound:
        logger.error(f"Worksheet '{SHEET_NAME}' not found")
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
    return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data='accept_privacy')
    markup.add(btn)
    bot.send_message(message.chat.id, WELCOME_TEXT,
                     reply_markup=markup, parse_mode='Markdown')


@bot.callback_query_handler(func=lambda call: call.data == 'accept_privacy')
def accept_privacy(call):
    bot.answer_callback_query(call.id)
    user_states[call.message.chat.id] = 'main_menu'
    show_main_menu(call.message)


def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–û—Å—Ç–µ–∫–ª–µ–Ω–∏–µ –æ–∫–æ–Ω")
    btn2 = types.KeyboardButton("–û—Å—Ç–µ–∫–ª–µ–Ω–∏–µ –±–∞–ª–∫–æ–Ω–∞/–ª–æ–¥–∂–∏–∏")
    btn3 = types.KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
    btn4 = types.KeyboardButton("üñº –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.chat.id, MAIN_MENU_TEXT, reply_markup=markup)


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'main_menu')
def handle_main_menu(message):
    if message.text == "–û—Å—Ç–µ–∫–ª–µ–Ω–∏–µ –æ–∫–æ–Ω":
        user_states[message.chat.id] = 'windows_location'
        ask_windows_location(message)
    elif message.text == "–û—Å—Ç–µ–∫–ª–µ–Ω–∏–µ –±–∞–ª–∫–æ–Ω–∞/–ª–æ–¥–∂–∏–∏":
        user_states[message.chat.id] = 'balcony_type'
        ask_balcony_type(message)
    elif message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        show_contacts(message)
    elif message.text == "üñº –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ":
        show_portfolio(message)


def show_contacts(message):
    user_states[message.chat.id] = 'contacts'
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(btn)
    bot.send_message(message.chat.id, CONTACTS_TEXT, reply_markup=markup)


def show_portfolio(message):
    user_states[message.chat.id] = 'portfolio'
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(btn)
    bot.send_message(message.chat.id, "–ù–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:", reply_markup=markup)

    portfolio_dir = os.path.join(os.path.dirname(__file__), 'portfolio')

    try:
        if os.path.exists(portfolio_dir) and os.path.isdir(portfolio_dir):
            photos = [f for f in os.listdir(portfolio_dir)
                      if f.lower().endswith(('.png', '.jpg', '.jpeg', '.gif'))]

            if not photos:
                bot.send_message(message.chat.id, "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ.")
                return

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 10 —Ñ–æ—Ç–æ (–º–∞–∫—Å–∏–º—É–º –¥–ª—è media_group)
            for i in range(0, len(photos), 10):
                media_group = []
                for photo in photos[i:i+10]:
                    media_group.append(types.InputMediaPhoto(
                        open(os.path.join(portfolio_dir, photo), 'rb')))

                bot.send_media_group(message.chat.id, media_group)

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                for media in media_group:
                    media.media.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {e}")
        bot.send_message(
            message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.")


@bot.message_handler(func=lambda message: message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def handle_main_menu_button(message):
    user_states[message.chat.id] = 'main_menu'
    show_main_menu(message)

@bot.message_handler(func=lambda message: message.text == "üñº –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
def handle_main_menu_button(message):
    show_portfolio(message)

# –í–µ—Ç–∫–∞ –¥–ª—è –æ—Å—Ç–µ–∫–ª–µ–Ω–∏—è –æ–∫–æ–Ω


def ask_windows_location(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ö–≤–∞—Ä—Ç–∏—Ä–∞")
    btn2 = types.KeyboardButton("–î–æ–º")
    btn3 = types.KeyboardButton("–û—Ñ–∏—Å")
    btn4 = types.KeyboardButton("–î—Ä—É–≥–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ")
    btn_back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    markup.add(btn1, btn2, btn3, btn4, btn_back)
    bot.send_message(
        message.chat.id, "–ö—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–∫–Ω–∞?", reply_markup=markup)
    user_data[message.chat.id] = {'branch': '–û–∫–Ω–∞'}


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'windows_location')
def handle_windows_location(message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        user_states[message.chat.id] = 'main_menu'
        show_main_menu(message)
        return

    user_data[message.chat.id]['answers'] = f"–ú–µ—Å—Ç–æ: {message.text}"
    user_states[message.chat.id] = 'windows_type'
    ask_windows_type(message)


def ask_windows_type(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ö–≤–∞—Ä—Ç–∏—Ä–Ω–æ–µ –æ–∫–Ω–æ")
    btn2 = types.KeyboardButton("–ë–∞–ª–∫–æ–Ω–Ω—ã–π –±–ª–æ–∫")
    btn3 = types.KeyboardButton("–í—Ö–æ–¥–Ω–∞—è –≥—Ä—É–ø–ø–∞")
    btn_back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    markup.add(btn1, btn2, btn3, btn_back)
    bot.send_message(message.chat.id, "–ö–∞–∫–æ–π —Ç–∏–ø –∏–∑–¥–µ–ª–∏—è?",
                     reply_markup=markup)


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'windows_type')
def handle_windows_type(message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        answers = user_data[message.chat.id]['answers'].split(', ')
        user_data[message.chat.id]['answers'] = ', '.join(answers[:-1])
        user_states[message.chat.id] = 'windows_location'
        ask_windows_location(message)
        return

    user_data[message.chat.id]['answers'] += f", –¢–∏–ø: {message.text}"
    user_states[message.chat.id] = 'windows_profile'
    ask_windows_profile(message)


def ask_windows_profile(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("Rehau")
    btn2 = types.KeyboardButton("KBE")
    btn3 = types.KeyboardButton("Brusbox")
    btn4 = types.KeyboardButton("–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
    btn_back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    markup.add(btn1, btn2, btn3, btn4, btn_back)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å:", reply_markup=markup)


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'windows_profile')
def handle_windows_profile(message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        answers = user_data[message.chat.id]['answers'].split(', ')
        user_data[message.chat.id]['answers'] = ', '.join(answers[:-1])
        user_states[message.chat.id] = 'windows_type'
        ask_windows_type(message)
        return

    user_data[message.chat.id]['answers'] += f", –ü—Ä–æ—Ñ–∏–ª—å: {message.text}"
    user_states[message.chat.id] = 'windows_size'
    ask_windows_size(message)


def ask_windows_size(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–î–∞, –º–æ–≥—É")
    btn2 = types.KeyboardButton("–ù–µ—Ç, –Ω—É–∂–µ–Ω –∑–∞–º–µ—Ä—â–∏–∫")
    btn_back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    markup.add(btn1, btn2, btn_back)
    bot.send_message(
        message.chat.id, "–ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∏–∑–¥–µ–ª–∏–π?", reply_markup=markup)


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'windows_size')
def handle_windows_size(message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        answers = user_data[message.chat.id]['answers'].split(', ')
        user_data[message.chat.id]['answers'] = ', '.join(answers[:-1])
        user_states[message.chat.id] = 'windows_profile'
        ask_windows_profile(message)
        return

    user_data[message.chat.id]['answers'] += f", –†–∞–∑–º–µ—Ä—ã: {message.text}"
    user_states[message.chat.id] = 'get_city'
    ask_city(message)

# –í–µ—Ç–∫–∞ –¥–ª—è –æ—Å—Ç–µ–∫–ª–µ–Ω–∏—è –±–∞–ª–∫–æ–Ω–æ–≤


def ask_balcony_type(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–¢—ë–ø–ª–æ–µ –æ—Å—Ç–µ–∫–ª–µ–Ω–∏–µ")
    btn2 = types.KeyboardButton("–•–æ–ª–æ–¥–Ω–æ–µ –æ—Å—Ç–µ–∫–ª–µ–Ω–∏–µ")
    btn3 = types.KeyboardButton("Slidors")
    btn_back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    markup.add(btn1, btn2, btn3, btn_back)
    bot.send_message(
        message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Å—Ç–µ–∫–ª–µ–Ω–∏—è:", reply_markup=markup)
    user_data[message.chat.id] = {'branch': '–ë–∞–ª–∫–æ–Ω'}


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'balcony_type')
def handle_balcony_type(message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        answers = user_data[message.chat.id]['answers'].split(', ')
        user_data[message.chat.id]['answers'] = ', '.join(answers[:-1])
        user_states[message.chat.id] = 'main_menu'
        show_main_menu(message)
        return

    user_data[message.chat.id]['answers'] = f"–¢–∏–ø –æ—Å—Ç–µ–∫–ª–µ–Ω–∏—è: {message.text}"
    user_states[message.chat.id] = 'balcony_shape'
    ask_balcony_shape(message)


def ask_balcony_shape(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ü—Ä—è–º–∞—è –ª–æ–¥–∂–∏—è")
    btn2 = types.KeyboardButton("–õ–æ–¥–æ—á–∫–∞")
    btn3 = types.KeyboardButton("–°–∞–ø–æ–∂–æ–∫")
    btn4 = types.KeyboardButton("–ü-–æ–±—Ä–∞–∑–Ω—ã–π")
    btn5 = types.KeyboardButton("–î—Ä—É–≥–æ–µ")
    btn_back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    markup.add(btn1, btn2, btn3, btn4, btn5, btn_back)
    bot.send_message(
        message.chat.id, "–ö–∞–∫–∞—è —É –≤–∞—Å —Ñ–æ—Ä–º–∞ –±–∞–ª–∫–æ–Ω–∞?", reply_markup=markup)


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'balcony_shape')
def handle_balcony_shape(message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        answers = user_data[message.chat.id]['answers'].split(', ')
        user_data[message.chat.id]['answers'] = ', '.join(answers[:-1])
        user_states[message.chat.id] = 'balcony_type'
        ask_balcony_type(message)
        return

    user_data[message.chat.id]['answers'] += f", –§–æ—Ä–º–∞ –±–∞–ª–∫–æ–Ω–∞: {message.text}"
    user_states[message.chat.id] = 'balcony_sheathing'
    ask_balcony_sheathing(message)


def ask_balcony_sheathing(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–î–∞")
    btn2 = types.KeyboardButton("–ù–µ—Ç")
    btn_back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    markup.add(btn1, btn2, btn_back)
    bot.send_message(message.chat.id, "–ù—É–∂–Ω–∞ –ª–∏ –æ–±—à–∏–≤–∫–∞?", reply_markup=markup)


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'balcony_sheathing')
def handle_balcony_sheathing(message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        answers = user_data[message.chat.id]['answers'].split(', ')
        user_data[message.chat.id]['answers'] = ', '.join(answers[:-1])
        user_states[message.chat.id] = 'balcony_shape'
        ask_balcony_shape(message)
        return

    user_data[message.chat.id]['answers'] += f", –û–±—à–∏–≤–∫–∞: {message.text}"
    user_states[message.chat.id] = 'balcony_insulation'
    ask_balcony_insulation(message)


def ask_balcony_insulation(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–î–∞")
    btn2 = types.KeyboardButton("–ù–µ—Ç")
    btn_back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    markup.add(btn1, btn2, btn_back)
    bot.send_message(message.chat.id, "–£—Ç–µ–ø–ª–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è?",
                     reply_markup=markup)


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'balcony_insulation')
def handle_balcony_insulation(message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        answers = user_data[message.chat.id]['answers'].split(', ')
        user_data[message.chat.id]['answers'] = ', '.join(answers[:-1])
        user_states[message.chat.id] = 'balcony_sheathing'
        ask_balcony_sheathing(message)
        return

    user_data[message.chat.id]['answers'] += f", –£—Ç–µ–ø–ª–µ–Ω–∏–µ: {message.text}"
    user_states[message.chat.id] = 'balcony_size'
    ask_balcony_size(message)


def ask_balcony_size(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–î–∞, –º–æ–≥—É")
    btn2 = types.KeyboardButton("–ù–µ—Ç, –Ω—É–∂–µ–Ω –∑–∞–º–µ—Ä—â–∏–∫")
    btn_back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    markup.add(btn1, btn2, btn_back)
    bot.send_message(message.chat.id, "–£–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã?", reply_markup=markup)


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'balcony_size')
def handle_balcony_size(message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        answers = user_data[message.chat.id]['answers'].split(', ')
        user_data[message.chat.id]['answers'] = ', '.join(answers[:-1])
        user_states[message.chat.id] = 'balcony_insulation'
        ask_balcony_insulation(message)
        return

    user_data[message.chat.id]['answers'] += f", –†–∞–∑–º–µ—Ä—ã: {message.text}"
    user_states[message.chat.id] = 'get_city'
    ask_city(message)

# –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã


def ask_city(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    markup.add(btn_back)
    bot.send_message(
        message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥/—Ä–∞–π–æ–Ω:", reply_markup=markup)


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'get_city')
def handle_city(message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        answers = user_data[message.chat.id]['answers'].split(', ')
        user_data[message.chat.id]['answers'] = ', '.join(answers[:-1])
        if user_data[message.chat.id]['branch'] == '–û–∫–Ω–∞':
            user_states[message.chat.id] = 'windows_size'
            ask_windows_size(message)
        else:
            user_states[message.chat.id] = 'balcony_size'
            ask_balcony_size(message)
        return

    user_data[message.chat.id]['city'] = message.text
    user_states[message.chat.id] = 'get_phone'
    ask_phone(message)


def ask_phone(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_contact = types.KeyboardButton(
        "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
    btn_back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    markup.add(btn_contact, btn_back)
    bot.send_message(
        message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)


@bot.message_handler(content_types=['contact'], func=lambda message: user_states.get(message.chat.id) == 'get_phone')
def handle_contact(message):
    user_data[message.chat.id]['phone'] = message.contact.phone_number
    user_states[message.chat.id] = 'get_name'
    ask_name(message)


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'get_phone')
def handle_phone(message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        answers = user_data[message.chat.id]['answers'].split(', ')
        user_data[message.chat.id]['answers'] = ', '.join(answers[:-1])
        user_states[message.chat.id] = 'get_city'
        ask_city(message)
        return

    if not message.text.isdigit():
        bot.send_message(
            message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ü–∏—Ñ—Ä–∞–º–∏")
        return

    user_data[message.chat.id]['phone'] = message.text
    user_states[message.chat.id] = 'get_name'
    ask_name(message)


def ask_name(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    markup.add(btn_back)
    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=markup)


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'get_name')
def handle_name(message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        answers = user_data[message.chat.id]['answers'].split(', ')
        user_data[message.chat.id]['answers'] = ', '.join(answers[:-1])
        user_states[message.chat.id] = 'get_phone'
        ask_phone(message)
        return

    user_data[message.chat.id]['name'] = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
    save_to_google_sheet(user_data[message.chat.id])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –≤ –≥—Ä—É–ø–ø—É
    try:
        bot.send_message(
            chat_id='-4852140574',
            text=f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {user_data[message.chat.id]['name']}, {user_data[message.chat.id]['phone']}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Google –¢–∞–±–ª–∏—Ü—É."
        )
    except Exception as e:
        logger.error(f"Error sending notification: {e}")

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    btn2 = types.KeyboardButton("üñº –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
    markup.add(btn1, btn2)
    bot.send_message(
        message.chat.id,
        f"–°–ø–∞—Å–∏–±–æ, {user_data[message.chat.id]['name']}!\n–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=markup
    )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states.pop(message.chat.id, None)
    user_data.pop(message.chat.id, None)


@bot.message_handler(commands=['cancel'])
def cancel(message):
    bot.send_message(message.chat.id, '–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω.',
                     reply_markup=ReplyKeyboardRemove())
    user_states.pop(message.chat.id, None)
    user_data.pop(message.chat.id, None)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logger.info("Starting bot...")
    bot.infinity_polling()
